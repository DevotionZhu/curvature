#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os
import sys
import psycopg2

# Add our parent folder to our path
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

import msgpack
import argparse
from curvature.geomath import Units
from curvature.output import OutputTools
from hashlib import sha1

parser = argparse.ArgumentParser(description='Output into a PostGIS database.')
parser.add_argument('-v', action='store_true', help='Verbose mode, showing status output')
parser.add_argument('--host', type=str, default='', help='The database to connect to.')
parser.add_argument('--port', type=int, default=5432, help='The database port to connect to.')
parser.add_argument('--database', type=str, required=True, help='The database to connect to.')
parser.add_argument('--user', type=str, help='Username for connecting to the database.')
parser.add_argument('--password', type=str, help='Password for connecting to the database.')
parser.add_argument('--source', type=str, required=True, help='Source string to identify this data-set. Used for partial refreshes.')
parser.add_argument('--clear', action='store_true', help='If true, all items with the source passed will be deleted prior to inserting new data.')
args = parser.parse_args()

if args.host:
    conn = psycopg2.connect(host=args.host, port=args.port, database=args.database, user=args.user, password=args.password)
else:
    conn = psycopg2.connect(port=args.port, database=args.database, user=args.user, password=args.password)
cur = conn.cursor()

# Fetch or insert our source.
cur.execute("SELECT id FROM public.sources WHERE source=%s", (args.source,))
result = cur.fetchone()
if result is None:
    cur.execute("INSERT INTO public.sources (source) VALUES (%s) RETURNING id", (args.source,))
    result = cur.fetchone()
    conn.commit()
if result is None:
    raise Exception('Failed to insert a source.')
source_id = result[0]

# Clear out previously inserted segments from our source.
if args.clear:
    if args.v:
        sys.stderr.write("Clearing {}\n".format(args.source))
    cur.execute("DELETE FROM public.curvature_segments WHERE fk_source=%s", (source_id,))

unpacker = msgpack.Unpacker(sys.stdin.buffer, use_list=True, encoding='utf-8')
tools = OutputTools('km')

success = 0
failed = 0

for collection in unpacker:
    coords = []
    way_ids = []
    output_ways = []
    for way in collection['ways']:
        segments = way['segments']
        coords.append('{:0.6f} {:0.6f}'.format(segments[0]['start'][1], segments[0]['start'][0]))
        for segment in way['segments']:
            coords.append('{:0.6f} {:0.6f}'.format(segment['end'][1], segment['end'][0]))

        # The id will include by the way id and the starting ref as a single OSM
        # way might be split into multiple collections.
        way_ids.append("{}-{}".format(way['id'], way['refs'][0]))

    hash = sha1()
    id_bytestring = ':'.join(map(str, way_ids)).encode('ascii')
    hash.update(id_bytestring)
    id = hash.hexdigest()
    name = tools.get_collection_name(collection)
    curvature = int(tools.get_collection_curvature(collection))
    length = int(tools.get_collection_length(collection))
    highway_tags = ', '.join(tools.get_length_weighted_collection_tags(collection, 'highway'))
    surface_tags = ', '.join(tools.get_length_weighted_collection_tags(collection, 'surface', 'unknown'))
    surface = tools.get_collection_paved_style(collection)
    if surface == 'unpaved':
        continue;
    if surface == 'paved':
        paved = True
    else:
        paved = False
    geom = 'LINESTRING({})'.format(','.join(coords))

    with conn.cursor() as cur:
        try:
            cur.execute("INSERT INTO public.curvature_segments (fk_source, id, name, curvature, paved, length, highway, surface, geom) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, ST_Transform(ST_GeomFromText(%s, 4326), 900913));", (source_id, id, name, curvature, paved, length, highway_tags, surface_tags, geom))
            position = 0
            for way in collection['ways']:
                position = position + 1
                if 'name' in way['tags']:
                    name = way['tags']['name']
                else:
                    name = ''
                if 'highway' in way['tags']:
                    highway = way['tags']['highway']
                else:
                    highway = ''
                if 'surface' in way['tags']:
                    surface = way['tags']['surface']
                else:
                    surface = 'unknown'
                min_lon = tools.get_way_min_lon(way) - 0.001
                max_lon = tools.get_way_max_lon(way) + 0.001
                min_lat = tools.get_way_max_lat(way) + 0.001
                max_lat = tools.get_way_min_lat(way) - 0.001
                try:
                    cur.execute("INSERT INTO public.segment_ways (fk_segment, position, id, name, highway, surface, curvature, length, min_lon, max_lon, min_lat, max_lat) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);", (id, position, way['id'], name, highway, surface,  way['curvature'], way['length'], min_lon, max_lon, min_lat, max_lat))
                except psycopg2.Error as e:
                    sys.stderr.write("Error insert ing way:\n\tsegment: {}\n\tposition: {}\n\tid: {}\n\tname: {}\n\thighway: {}\n\tsurface: {}\n\tcurvature: {}\n\tlength: {}\n".format(id, position, way['id'], name, highway, surface,  way['curvature'], way['length']))
                    raise

            conn.commit()
            success = success + 1
        except psycopg2.Error as e:
            conn.rollback()
            failed = failed + 1
            sys.stderr.write("{}".format(e))
            sys.stderr.write("To insert:\n\tSource: {}\n\tHash: {}\n\tName: {}\n\tCurvature: {}\n\tLength: {}\n\tHighway: '{}'\n\tSurface: '{}'\n".format(args.source, id, name, curvature, length, highway_tags, surface_tags))
            with conn.cursor() as cur:
                cur.execute("SELECT source, c.id, name, curvature, length, highway, surface FROM public.curvature_segments c LEFT JOIN public.sources s ON fk_source = s.id WHERE c.id=%s", (id,))
                result = cur.fetchone()
                if result is not None:
                    sys.stderr.write("Existing:\n\tSource: {}\n\tHash: {}\n\tName: {}\n\tCurvature: {}\n\tLength: {}\n\tHighway: {}\n\tSurface: {}\n".format(result[0], result[1], result[2], result[3], result[4], result[5], result[6]))
            pass

conn.commit()
cur.close()
conn.close()

if args.v:
    sys.stderr.write("Attemped to insert {} segments. {} were successful and {} failed.\n".format(success + failed, success, failed))
