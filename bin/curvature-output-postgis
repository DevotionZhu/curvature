#!/usr/bin/env python
# -*- coding: UTF-8 -*-

import os
import sys
import psycopg2

# Add our parent folder to our path
sys.path.insert(0, os.path.dirname(os.path.dirname(__file__)))

import msgpack
import argparse
from curvature.geomath import Units
from curvature.output import OutputTools
from hashlib import sha1

parser = argparse.ArgumentParser(description='Output into a PostGIS database.')
parser.add_argument('-v', action='store_true', help='Verbose mode, showing status output')
parser.add_argument('--host', type=str, default='', help='The database to connect to.')
parser.add_argument('--port', type=int, default=5432, help='The database port to connect to.')
parser.add_argument('--database', type=str, required=True, help='The database to connect to.')
parser.add_argument('--user', type=str, help='Username for connecting to the database.')
parser.add_argument('--password', type=str, help='Password for connecting to the database.')
parser.add_argument('--source', type=str, required=True, help='Source string to identify this data-set. Used for partial refreshes.')
parser.add_argument('--clear', action='store_true', help='If true, all items with the source passed will be deleted prior to inserting new data.')
args = parser.parse_args()

if args.host:
    conn = psycopg2.connect(host=args.host, port=args.port, database=args.database, user=args.user, password=args.password)
else:
    conn = psycopg2.connect(port=args.port, database=args.database, user=args.user, password=args.password)
cur = conn.cursor()

# Fetch or insert our source.
cur.execute("SELECT id FROM public.sources WHERE source=%s", (args.source,))
result = cur.fetchone()
if result is None:
    cur.execute("INSERT INTO public.sources (source) VALUES (%s) RETURNING id", (args.source,))
    result = cur.fetchone()
if result is None:
    raise Exception('Failed to insert a source.')
source_id = result[0]

# Clear out previously inserted segments from our source.
if args.clear:
    if args.v:
        sys.stderr.write("Clearing {}\n".format(args.source))
    cur.execute("DELETE FROM public.curvature_segments WHERE fk_source=%s", (source_id,))

unpacker = msgpack.Unpacker(sys.stdin.buffer, use_list=True, encoding='utf-8')
tools = OutputTools('km')

for collection in unpacker:
    coords = []
    way_ids = []
    output_ways = []
    for way in collection['ways']:
        segments = way['segments']
        coords.append('{:0.6f} {:0.6f}'.format(segments[0]['start'][1], segments[0]['start'][0]))
        for segment in way['segments']:
            coords.append('{:0.6f} {:0.6f}'.format(segment['end'][1], segment['end'][0]))

        way_ids.append(way['id'])

    hash = sha1()
    hash.update(':'.join(map(str, way_ids)))
    id = hash.hexdigest()
    name = tools.get_collection_name(collection)
    curvature = int(tools.get_collection_curvature(collection))
    surface = tools.get_collection_paved_style(collection)
    if surface == 'unpaved':
        continue;
    if surface == 'paved':
        paved = True
    else:
        paved = False
    geom = 'LINESTRING({})'.format(','.join(coords))

    with conn.cursor() as cur:
        try:
            cur.execute("INSERT INTO public.curvature_segments (fk_source, id, name, curvature, paved, geom) VALUES (%s, %s, %s, %s, %s, ST_GeomFromText(%s));", (source_id, id, name, curvature, paved, geom))
        except psycopg2.IntegrityError as e:
            conn.rollback()
            sys.stderr.write("{}".format(e))
            sys.stderr.write("To insert:\n\tSource: {}\n\tHash: {}\n\tName: {}\n\tCurvature: {}\n".format(args.source, id, name, curvature))
            with conn.cursor() as cur:
                cur.execute("SELECT source, c.id, name, curvature FROM public.curvature_segments c LEFT JOIN public.sources s ON fk_source = s.id WHERE c.id=%s", (id,))
                result = cur.fetchone()
                sys.stderr.write("Existing:\n\tSource: {}\n\tHash: {}\n\tName: {}\n\tCurvature: {}\n".format(result[0], result[1], result[2], result[3]))
            pass

conn.commit()
cur.close()
conn.close()
